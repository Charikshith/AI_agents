 
from fastapi import FastAPI, HTTPException, Body
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union

# Import the datetime class from Python's built-in datetime module.
# We'll use this to get the current date and time.
from datetime import datetime

# --- Pydantic Models for Request and Response Validation ---

class Capability(BaseModel):
    streaming: bool
    pushNotifications: bool

class AgentCardResponse(BaseModel):
    name: str
    description: str
    url: str
    version: str
    capabilities: Capability

class MessagePart(BaseModel):
    text: str
    # Add other part types if needed, e.g., image_url: Optional[str] = None

class TaskMessage(BaseModel):
    role: Optional[str] = None # Role might not be present in incoming user message
    parts: List[MessagePart]

class AgentResponseMessage(BaseModel):
    role: str = "agent"
    parts: List[MessagePart]

class TaskRequest(BaseModel):
    id: Optional[str] = None # Task ID might be optional or generated by agent
    message: TaskMessage
    # Add other A2A task fields if needed, e.g., context, config

class TaskStatus(BaseModel):
    state: str

class TaskResponse(BaseModel):
    id: Optional[str] = None
    status: TaskStatus
    messages: List[Union[TaskMessage, AgentResponseMessage]] # Can include original and agent's reply


# Create a new FastAPI app instance.
# This initializes our server application so we can define endpoints on it.
app = FastAPI(
    title="TellTimeAgent API",
    description="An agent that tells the current time when asked, compliant with A2A specs.",
    version="1.0.0",
)

# ---------------------------------------
# Endpoint: Agent Card (Discovery Phase)
# ---------------------------------------

# Define an HTTP GET route for the well-known agent discovery path.
# According to the A2A spec, clients discover an agent by calling `/.well-known/agent.json`.
@app.get(
    "/.well-known/agent.json",
    response_model=AgentCardResponse, # Validate and document the response structure
    summary="Agent Discovery Card",
    tags=["Discovery"]
)
async def agent_card():
    """
    Returns metadata about this agent.
    This includes the agent's name, description, base URL, version, and capabilities.
    """
    return {
        "name": "TellTimeAgent",  # Human-readable name of the agent
        "description": "Tells the current time when asked.",  # Short summary of what the agent does
        "url": "http://localhost:8000",  # Where this agent is hosted (FastAPI default port)
        "version": "1.0",  # Version info for the agent
        "capabilities": {
            "streaming": False,           # Indicates that this agent does not support real-time streaming
            "pushNotifications": False    # Indicates that the agent does not send async push notifications
        }
    }

# ---------------------------------------
# Endpoint: Task Handling (tasks/send)
# ---------------------------------------

# Define an HTTP POST route at /tasks/send
# This is the main endpoint that A2A clients use to send a task to the agent.
@app.post(
    "/tasks/send",
    response_model=TaskResponse, # Validate and document the response structure
    summary="Handle an incoming task",
    tags=["Tasks"]
)
async def handle_task(task: TaskRequest = Body(...)): # Use Pydantic model for request body validation
    """
    Receives a task, processes it, and returns a response.
    For this agent, it extracts the user message and replies with the current time.
    """
    # FastAPI with Pydantic handles request body parsing and validation automatically.
    # If the request doesn't match TaskRequest, a 422 Unprocessable Entity error is returned.

    # We can safely access fields now because Pydantic validated them.
    task_id = task.id

    # Extract the user message text from the first message part.
    # A2A represents messages as a list of "parts", where the first part usually contains text.
    if not task.message.parts:
        raise HTTPException(status_code=400, detail="Invalid task format: message parts cannot be empty.")
    
    user_message_text = task.message.parts[0].text
    
    # Log the received message (optional)
    print(f"Received task (ID: {task_id}): {user_message_text}")

    # ---------------------------------------
    # Generate a response to the user message
    # ---------------------------------------

    # Get the current system time as a formatted string.
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Build the agent's response message text.
    reply_text = f"The current time is: {current_time}"

    # Return a properly formatted A2A task response.
    # This includes the original message and a new message from the agent.
    return {
        "id": task_id,  # Reuse the same task ID in the response
        "status": {"state": "completed"},  # Mark the task as completed
        "messages": [
            task.message.model_dump(),  # Include the original user message (converted back to dict)
            {
                "role": "agent",              # This message is from the agent
                "parts": [{"text": reply_text}]  # Reply content in text format
            }
        ]
    }

# ---------------------------------------
# Run the FastAPI server (using Uvicorn)
# ---------------------------------------

# To run this FastAPI app:
# 1. Save the code as a Python file (e.g., main.py).
# 2. Install FastAPI and Uvicorn: pip install fastapi "uvicorn[standard]" pydantic
# 3. Run Uvicorn from your terminal in the same directory as your file:
#    uvicorn main:app --reload
#    (Assuming your file is named main.py and the FastAPI instance is 'app')
# 4. Access endpoints:
#    - Agent Card: GET http://localhost:8000/.well-known/agent.json
#    - Task Send: POST http://localhost:8000/tasks/send (with appropriate JSON body)
# 5. FastAPI also provides automatic interactive API documentation:
#    - Swagger UI: http://localhost:8000/docs
#    - ReDoc: http://localhost:8000/redoc

# The `if __name__ == "__main__":` block for `app.run()` is not used with FastAPI/Uvicorn.
# Uvicorn is the ASGI server that runs the FastAPI application.
#uvicorn time:app --reload --port 8000

